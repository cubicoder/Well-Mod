plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${mc_version}-${mod_version}"
group = 'cubicoder'
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}-${mc_version}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            // to fix Patchouli mixin: https://github.com/VazkiiMods/Patchouli/issues/375
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                well {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${mod_id}"
            
            // to fix Patchouli mixin: https://github.com/VazkiiMods/Patchouli/issues/375
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                well {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${mod_id}"
            
            // to fix Patchouli mixin: https://github.com/VazkiiMods/Patchouli/issues/375
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                well {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            
            // to fix Patchouli mixin: https://github.com/VazkiiMods/Patchouli/issues/375
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                well {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
    
    // JEI
    maven {
        url "https://maven.blamejared.com/"
    }
    // other CurseForge mods
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.21'

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    implementation fg.deobf("curse.maven:the-one-probe-245211:${top_fileid}")
    
    implementation fg.deobf("curse.maven:jade-324717:${jade_fileid}")
    
    implementation fg.deobf("curse.maven:catalogue-459701:${catalogue_fileid}")
    implementation fg.deobf("curse.maven:configured-457570:${configured_fileid}")
    
    implementation fg.deobf("curse.maven:pipez-443900:4629652")
    //implementation fg.deobf("curse.maven:portable-tanks-503920:4024684")
    //implementation fg.deobf("curse.maven:supermartijn642s-core-lib-454372:3863129")
    //implementation fg.deobf("curse.maven:supermartijn642s-config-lib-438332:3862966")
    implementation fg.deobf("curse.maven:largefluidtank-291006:4068254")
    implementation fg.deobf("curse.maven:scalable-cats-force-320926:4028119")
    //implementation fg.deobf("curse.maven:cofh-core-69162:4385216") // 1.19.2
    //implementation fg.deobf("curse.maven:thermal-foundation-222880:4382373") // 1.19.2
    //implementation fg.deobf("curse.maven:thermal-expansion-69163:4382371") // 1.19.2
    //implementation fg.deobf("curse.maven:thermal-innovation-291737:4382374") // 1.19.2
    //implementation fg.deobf("curse.maven:thermal-dynamics-227443:4391160") // 1.19.2
    //implementation fg.deobf("curse.maven:patchouli-306770:3846086")
    //implementation fg.deobf("curse.maven:itank-256991:3921315") // 1.19.2
    //implementation fg.deobf("curse.maven:gamemenumodoption-353051:4440228")
    implementation fg.deobf("curse.maven:reauth-237701:4408013")
    implementation fg.deobf("curse.maven:biomes-o-plenty-220318:4473556")
    implementation fg.deobf("curse.maven:terrablender-563928:4618490")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_name}",
                "Specification-Vendor"    : "cubicoder",
                "Specification-Version"   : "${mc_version}",
                "Implementation-Title"    : "${mod_id}",
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "cubicoder",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
